% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code.classify.func.R
\name{code.classify.func}
\alias{code.classify.func}
\title{Classify any custom R function via its Code-Base-Weight (CBW)}
\usage{
code.classify.func(siFuncStartCELN = NULL, siFuncStopCELN = NULL)
}
\arguments{
\item{siFuncStartCELN}{an integer that denotes the START of the function's
block of code. The Code Editor Line Number (\code{CELN}) of
the first line of code that defines a custom function.}

\item{siFuncStopCELN}{an integer that denotes the STOP (end) of the function's
block of code. The Code Editor Line Number (\code{CELN}) of
the last line of code that defines a custom function -
usually identified by a closing curly brace.}
}
\value{
This function returns a single \if{html}{\out{<abbreviated>}} character value that
classifies five sizes (or classes) of custom R functions:
* "TNY" -> a "Tiny" R Function (less than 50 lines of code);
* "SML" -> a "Small" R Function (between 50 & 150 lines of code);
* "MED" -> a "Medium" R Function (between 150 & 750 lines of code);
* "LRG" -> a "Large" R Function (between 750 & 1500 lines of code);
* "MSV" -> a "Massive" R Function (greater than 1500 lines of code);
}
\description{
A \if{html}{\out{<tiny>}} Helper Function that classifies a custom R function on the basis
of the size of code that defines that functions (i.e. on the basis of the
number of lines of code that constitutes the function itself). This custom
function was intended to mainly support the MFMR Suite of R Functions, but
can be utilized as a standalone function in other R packages.
}
\examples{
### Classify your Custom R Function as follows:
require(MFMRutils)   # -> Ensures the "MFMRutils" library is installed & loaded

"my_cust_r_func" <- function() {   # -> Set this Code Editor Line Number `CELN`
                                   #    as the `siFuncStartCELN` arg value !!!

   # Define your custom function code logic here !!!

   # Classify your custom function ...
   ssFuncType <- MFMRutils::code.classify.func(1, 9)
   base::cat(
    base::paste0(
      " => My Custom R Function Class == ", ssFuncType, " !!!\n"
    )
   )

}   # -> Set this Code Editor Line Number `CELN`as the `siFuncStopCELN` arg value !!!

}
